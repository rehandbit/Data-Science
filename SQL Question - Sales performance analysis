he Challenge: Analyzing Sales Performance Through the Management Hierarchy

You are the lead data analyst for a large e-commerce company. The executive team wants a detailed report on sales performance, 
but they don't just want to see total sales. They want to understand how sales performance cascades through the management hierarchy and 
identify top-performing customers for each sales manager's team.

The Database Schema

You have the following tables:

employees
| Column Name | Data Type | Description |
|---|---|---|
| employee_id | INT (Primary Key) | Unique identifier for each employee. |
| employee_name | VARCHAR | The name of the employee. |
| manager_id | INT (Foreign Key to employees.employee_id) | The employee_id of this employee's direct manager. NULL for the CEO. |
| hire_date | DATE | The date the employee was hired. |

customers
| Column Name | Data Type | Description |
|---|---|---|
| customer_id | INT (Primary Key) | Unique identifier for each customer. |
| customer_name | VARCHAR | The name of the customer. |
| signup_date | DATE | The date the customer registered. |

products
| Column Name | Data Type | Description |
|---|---|---|
| product_id | INT (Primary Key) | Unique identifier for each product. |
| product_name | VARCHAR | The name of the product. |
| category | VARCHAR | The product category. |
| price | DECIMAL(10, 2) | The price of the product. |

orders
| Column Name | Data Type | Description |
|---|---|---|
| order_id | INT (Primary Key) | Unique identifier for each order. |
| customer_id | INT (Foreign Key to customers.customer_id) | The customer who placed the order. |
| sales_reponsible_id | INT (Foreign Key to employees.employee_id) | The employee responsible for the sale. |
| order_date | DATE | The date the order was placed. |

order_items
| Column Name | Data Type | Description |
|---|---|---|
| order_item_id | INT (Primary Key) | Unique identifier for each order item. |
| order_id | INT (Foreign Key to orders.order_id) | The order this item belongs to. |
| product_id | INT (Foreign Key to products.product_id) | The product that was ordered. |
| quantity | INT | The quantity of the product ordered. |

The Question

Write a single SQL query that returns a report with the following information for each manager in the company who has at least one subordinate (directly or indirectly) who is a salesperson:

    manager_name: The name of the manager.

    manager_level: The level of the manager in the hierarchy (e.g., the CEO is level 1, their direct reports are level 2, and so on).

    total_team_sales: The total sales amount generated by all salespeople who report up to this manager (including the manager's own sales if they are also a salesperson, 
and the sales of their direct and indirect reports).

    number_of_salespeople: The total count of unique salespeople in the manager's entire reporting chain (direct and indirect).

    top_customer_in_team: The name of the customer who has spent the most money with the salespeople in that manager's team.

    top_customer_total_spent: The total amount spent by that top customer with the salespeople in that manager's team.

    most_lucrative_month: The month (in 'YYYY-MM' format) in which the manager's team generated the highest sales.

Important Considerations:

    A "salesperson" is any employee who appears in the orders.sales_reponsible_id column.

    The hierarchy of reporting must be traversed recursively.[1]

    The final result should be ordered by manager_level and then by total_team_sales in descending order.

    If there's a tie for the top customer or the most lucrative month, you can return any of the tied records.

This exercise will require you to use a recursive Common Table Expression (CTE) to navigate the employee hierarchy, multiple subqueries or CTEs to aggregate sales data at different levels,
window functions to rank customers within each manager's team, and complex joins to bring all the information together.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


SQL
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
```sql
WITH RECURSIVE EmployeeHierarchy AS (
    -- This CTE is correct and remains unchanged.
    SELECT
        employee_id,
        employee_name,
        manager_id,
        1 AS manager_level,
        employee_id AS top_level_manager_id
    FROM
        employee
    WHERE
        manager_id IS NULL
    UNION ALL
    SELECT
        e.employee_id,
        e.employee_name,
        e.manager_id,
        eh.manager_level + 1,
        eh.top_level_manager_id
    FROM
        employee e
    JOIN
        EmployeeHierarchy eh ON e.manager_id = eh.employee_id
),
SalespersonSales AS (
    -- This CTE is also correct and remains unchanged.
    SELECT
        o.sales_responsible_id,
        o.customer_id,
        p.price * oi.quantity AS sale_amount,
        TO_CHAR(o.order_date, 'YYYY-MM') AS sale_month
    FROM
        orders o
    JOIN
        orders_items oi ON o.order_id = oi.order_id
    JOIN
        products p ON oi.products_id = p.products_id
    WHERE
        o.sales_responsible_id IS NOT NULL
),
ManagerTeamData AS (
    -- THE FIX STARTS HERE. We now only link a sale to the top manager's ID.
    -- We do NOT bring in the salesperson's level here.
    SELECT
        eh.top_level_manager_id AS manager_id,
        ss.sales_responsible_id,
        ss.customer_id,
        ss.sale_amount,
        ss.sale_month
    FROM
        EmployeeHierarchy eh
    JOIN
        SalespersonSales ss ON eh.employee_id = ss.sales_responsible_id
),
ManagerAggregates AS (
    -- Now this aggregation correctly groups everything by the single manager_id.
    SELECT
        manager_id,
        SUM(sale_amount) AS total_team_sales,
        COUNT(DISTINCT sales_responsible_id) AS number_of_salespeople
    FROM
        ManagerTeamData
    GROUP BY
        manager_id
),
RankedCustomersPerTeam AS (
    -- This now correctly ranks customers for the entire team.
    SELECT
        mtd.manager_id,
        c.customer_name,
        SUM(mtd.sale_amount) AS total_spent,
        ROW_NUMBER() OVER(PARTITION BY mtd.manager_id ORDER BY SUM(mtd.sale_amount) DESC) as rn
    FROM
        ManagerTeamData mtd
    JOIN
        customers c ON mtd.customer_id = c.customer_id
    GROUP BY
        mtd.manager_id, c.customer_name
),
RankedMonthsPerTeam AS (
    -- This now correctly ranks months for the entire team.
    SELECT
        manager_id,
        sale_month,
        ROW_NUMBER() OVER(PARTITION BY manager_id ORDER BY SUM(sale_amount) DESC) as rn
    FROM
        ManagerTeamData
    GROUP BY
        manager_id, sale_month
)
-- FINAL SELECT: We now combine our clean aggregates with the manager's details.
SELECT
    mgr_details.employee_name AS manager_name,
    mgr_details.manager_level,
    ma.total_team_sales,
    ma.number_of_salespeople,
    rc.customer_name AS top_customer_in_team,
    rc.total_spent AS top_customer_total_spent,
    rm.sale_month AS most_lucrative_month
FROM
    ManagerAggregates ma
-- Join back to the hierarchy to get the manager's name and correct level (level 1).
JOIN
    EmployeeHierarchy mgr_details ON ma.manager_id = mgr_details.employee_id AND mgr_details.manager_level = 1
JOIN
    RankedCustomersPerTeam rc ON ma.manager_id = rc.manager_id AND rc.rn = 1
JOIN
    RankedMonthsPerTeam rm ON ma.manager_id = rm.manager_id AND rm.rn = 1
WHERE
    ma.number_of_salespeople > 0
ORDER BY
    mgr_details.manager_level,
    ma.total_team_sales DESC;
